#include <iostream>
#include <vector>
using namespace std;

int iSteps = 0, rSteps = 0;

int iterativeFibonacci(int n)
{
    iSteps = 2;
    vector<int>v;
    v.push_back(0);
    v.push_back(1);

    for (int i = 2; i <= n; i++)
    {
        iSteps++;
        v.push_back(v[i - 1] + v[i - 2]);
    }

    return v[n];
}

int recursiveFibonacci(int n)
{
    rSteps++;
    if(n<=1)
        return n;
    
    return recursiveFibonacci(n - 1) + recursiveFibonacci(n - 2);
}

int main()
{
    int n;
    cin >> n;
    cout << "nth Fibonacci value iterative: " << iterativeFibonacci(n) << endl;
    cout << "nth Fibonacci value recursive: " << recursiveFibonacci(n) << endl;
    cout << "Steps required using Iteration: " << iSteps << endl;
    cout << "Steps required using Recurssion: " << rSteps << endl;

    return 0;
}

// Recursive : TC - O(n), SC - O(n) 
// Iterative : TC - O(n), SC - O(n) O(1) when no vector is used
