#include <iostream>
#include <vector>
using namespace std;

// 1) Using Reccursion => TC:O(2^n) SC:O(n)
int recFib(int n)
{
    if(n<=1)
        return n;
    else
        return recFib(n - 1) + recFib(n - 2);
}

// 3) Tabulation => bottom up approach => TC:O(n) SC:O(n)=>dp[] space only
int dpFib(int n)
{
    vector<int> dp(n);
    dp[1] = 0;
    dp[2] = 1;

    for (int i = 3; i <= n; i++)
    {
        dp[i]=dp[i-1]+dp[i-2];
    }
    return dp[n];
}

// 2) Memoization => top down approach => TC:O(n) SC:O(n)+O(n)=>dp[] space + rec. stack
int fibMemo(int n)
{
    vector<int> dp(n+1, -1);
    // base case
    if (n <= 1)
    {
        return n;
    }
    // check if subproblem is already solved
    if (dp[n] != -1)
    {
        return dp[n];
    }
    // still not solved subproblem
    return dp[n] = fibMemo(n - 1) + fibMemo(n - 2);
}

// Iterative : TC - O(n), SC - O(1) when no vector is used
int iterFib(int n)
{
    int a = 0;
    int b = 1;
    int c;

    if(n == 1)
        return 0;

    if(n == 2)
        return 1;

    for (int i = 3; i <= n; i++)
    {
        c = a + b;
        a = b;
        b = c;
    }
    return c;
}

int main()
{
    int n;
    cin >> n;

    cout << "Recusive Fib num: " << recFib(n-1) << endl;
    cout << "Iterative Fib num: " << iterFib(n) << endl;
    cout << "dp Fib num: " << dpFib(n) << endl;
    cout << "memo Fib num: " << fibMemo(n-1) << endl;

    return 0;
}
