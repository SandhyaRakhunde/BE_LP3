#include <iostream>
#include <queue>
using namespace std;

class HuffmanNode 
{
    public:
        char data;
        int freq;
        HuffmanNode *left;
        HuffmanNode *right;

        HuffmanNode(char data, int freq) : data(data), freq(freq), left(nullptr), right(nullptr){};
};

struct compareNodes {
    bool operator()(HuffmanNode *a, HuffmanNode *b)
    {
        return a->freq > b->freq;
    }
};

class HuffmanTree {
    public:
        HuffmanNode * buildHuffmanTree(char data[], int freq[], int size)
        {
            priority_queue<HuffmanNode *, vector<HuffmanNode *>, compareNodes> minHeap;

            for (int i = 0; i < size; i++)
            {
                minHeap.push(new HuffmanNode(data[i], freq[i]));
            }

            while(minHeap.size() != 1)
            {
                HuffmanNode *left = minHeap.top();
                minHeap.pop();
                HuffmanNode *right = minHeap.top();
                minHeap.pop();

                HuffmanNode *temp = new HuffmanNode('$', left->freq + right->freq);
                temp->left = left;
                temp->right = right;
                minHeap.push(temp);
            }

            return minHeap.top();
        }

        void printHuffmanTree(HuffmanNode *root, string str="")
        {
            if(!root )
                return;
            if(root->data != '$')
            {
                cout << root->data << " : " << str << endl;
            }
            printHuffmanTree(root->left, str + "0");
            printHuffmanTree(root->right, str + "1");
        }
};

int main()
{
    char data[] = {'a', 'b', 'c', 'd', 'e', 'f'};
    int freq[] = {5, 9, 12, 13, 16, 45};

    int size = sizeof(data) / sizeof(data[0]);

    HuffmanTree h;
    HuffmanNode *root = h.buildHuffmanTree(data, freq, size);

    h.printHuffmanTree(root);

    return 0;
}


